trigger:
- master

variables:
  azureServiceConnectionId: '6d7c31c8-5ec3-475d-afa1-4e79dc15f591'
  webAppName: 'don-galleto'
  resourceGroup: 'bases-de-datos'
  projectRoot: $(System.DefaultWorkingDirectory)

# ===============================================================
# Etapa de Build
# ===============================================================
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build on self-hosted Windows agent'
    pool:
      name: 'OscarAgent'
    steps:
    - script: |
        python --version
        pip --version
      displayName: 'Check existing Python installation'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: 'Install Python dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive project files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
        replaceExistingArchive: true

    # Verificar contenido del ZIP
    - script: |
        echo "=== Contenido del archivo ZIP ==="
        powershell -Command "Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::OpenRead('$(Build.ArtifactStagingDirectory)/drop.zip').Entries | Select-Object -First 20 FullName | Format-Table"
      displayName: 'Verify ZIP contents'

    - publish: '$(Build.ArtifactStagingDirectory)/drop.zip'
      artifact: drop
      displayName: 'Publish deployment package'

# ===============================================================
# Etapa de Test
# ===============================================================
- stage: Test
  displayName: 'Run Automated Tests'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: RunTests
    displayName: 'Execute Tests and Generate Reports'
    pool:
      name: 'OscarAgent'
    
    steps:
    # 1. Verificar Python
    - script: |
        python --version
        pip --version
      displayName: 'Check Python installation'

    # 2. Instalar dependencias
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov unittest-xml-reporting
      workingDirectory: $(projectRoot)
      displayName: 'Install dependencies'

    # 3. Ejecutar pruebas
    - script: |
        echo "===================================================================="
        echo "üöÄ INICIANDO EJECUCI√ìN DE PRUEBAS AUTOM√ÅTICAS"
        echo "===================================================================="
        echo "üìÖ Timestamp: $(date)"
        echo "üåø Branch: $(Build.SourceBranch)"
        echo "üîë Commit: $(Build.SourceVersion)"
        echo "üë§ Ejecutado por: $(Build.RequestedFor)"
        echo "üÜî Build ID: $(Build.BuildId)"
        echo "===================================================================="
        
        python -m pytest tests/ -v --cov=./ --cov-report=xml:coverage.xml --cov-report=html:coverage_html --junitxml=test-results.xml
      displayName: 'Run Tests with Coverage and Metrics'
      env:
        DATABASE_URL: $(DATABASE_URL)
        SECRET_KEY: $(SECRET_KEY)

    # 4. Publicar resultados
    - task: PublishTestResults@2
      displayName: 'Publish Test Results to Azure'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test-results.xml'
        testRunTitle: 'Don Galleto - Test Results'
        mergeTestResults: false
        failTaskOnFailedTests: true

    # 5. Publicar cobertura
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(projectRoot)/coverage.xml'
        reportDirectory: '$(projectRoot)/coverage_html'

    # 6. Guardar artefactos
    - publish: '$(projectRoot)/test-results.xml'
      artifact: test-results
      displayName: 'Publish Test Results XML'

    - publish: '$(projectRoot)/coverage_html'
      artifact: coverage-report
      displayName: 'Publish HTML Coverage Report'

# ===============================================================
# Etapa de Deploy
# ===============================================================
- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Deploy to Azure Web App Linux'
    pool:
      name: 'OscarAgent'
    steps:
    - download: current
      artifact: drop
      displayName: 'Download build artifacts'

    # Habilitar logs de aplicaci√≥n
    - task: AzureCLI@2
      displayName: 'Enable Application Logging'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az webapp log config `
            --name $(webAppName) `
            --resource-group $(resourceGroup) `
            --application-logging filesystem `
            --level verbose `
            --docker-container-logging filesystem

    # Configurar variables de entorno y comando de inicio
    - task: AzureAppServiceSettings@1
      displayName: 'Configure App Settings and Startup Command'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        appName: '$(webAppName)'
        resourceGroupName: '$(resourceGroup)'
        appSettings: |
          [
            {
              "name": "DATABASE_URL",
              "value": "$(DATABASE_URL)",
              "slotSetting": false
            },
            {
              "name": "SECRET_KEY",
              "value": "$(SECRET_KEY)",
              "slotSetting": false
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true",
              "slotSetting": false
            }
          ]
        startupCommand: 'gunicorn --bind=0.0.0.0 --timeout 600 app:app'
        
    # Despliegue a Azure Web App
    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        appType: 'webAppLinux'
        appName: '$(webAppName)'
        package: '$(Pipeline.Workspace)/drop/drop.zip'
        deploymentMethod: 'zipDeploy'
        runtimeStack: 'PYTHON|3.10'
